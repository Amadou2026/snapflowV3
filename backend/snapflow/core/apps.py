# core/apps.py
from django.apps import AppConfig
import logging

logger = logging.getLogger(__name__)

class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'
    
    scheduler_started = False  # Variable de classe pour √©viter les doubles d√©marrages

    def ready(self):
        """
        Appel√© au d√©marrage de Django.
        D√©marre le scheduler et charge les signaux.
        """
        # √âviter le double chargement lors du rechargement automatique en dev
        import sys
        
        # En production, RUN_MAIN n'existe pas, donc on d√©marre toujours
        # En dev, on d√©marre seulement dans le processus principal
        run_main = 'runserver' not in sys.argv
        
        if run_main or not CoreConfig.scheduler_started:
            try:
                # Import des signaux (AVANT le scheduler pour que tout soit pr√™t)
                from . import signals
                logger.info("‚úÖ Signaux Django charg√©s")
                print("‚úÖ Signaux Django charg√©s")
                
                # D√©marrage du scheduler
                from .scheduler import start_scheduler
                logger.info("üöÄ Tentative de d√©marrage du scheduler...")
                print("üöÄ Tentative de d√©marrage du scheduler...")
                
                start_scheduler()  # ‚ö†Ô∏è PAS dans un thread - APScheduler g√®re d√©j√† les threads
                
                CoreConfig.scheduler_started = True
                logger.info("‚úÖ Application Core initialis√©e avec succ√®s")
                print("‚úÖ Application Core initialis√©e avec succ√®s")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation: {e}", exc_info=True)
                print(f"‚ùå Erreur lors de l'initialisation: {e}")
                import traceback
                traceback.print_exc()