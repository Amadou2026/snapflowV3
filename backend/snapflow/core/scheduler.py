# core/scheduler.py
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from django.conf import settings
import logging
import atexit

logger = logging.getLogger(__name__)

# Instance globale du scheduler
scheduler = BackgroundScheduler({
    'apscheduler.timezone': 'UTC',  # ou votre timezone
    'apscheduler.job_defaults.coalesce': True,
    'apscheduler.job_defaults.max_instances': 1,  # Une seule instance √† la fois
})

def start_scheduler():
    """
    D√©marre le scheduler APScheduler pour l'ex√©cution p√©riodique des tests.
    """
    if scheduler.running:
        logger.warning("‚ö†Ô∏è Scheduler d√©j√† en cours d'ex√©cution")
        print("‚ö†Ô∏è Scheduler d√©j√† en cours d'ex√©cution")
        return
    
    try:
        from core.jobs import execute_pending_tests
        
        # Ajouter le job avec un ID unique
        scheduler.add_job(
            func=execute_pending_tests,
            trigger=IntervalTrigger(minutes=1),
            id='execute_pending_tests',
            name='V√©rification des tests en attente',
            replace_existing=True,  # Remplace si existe d√©j√†
            max_instances=1  # Une seule instance √† la fois
        )
        
        # D√©marrer le scheduler
        scheduler.start()
        
        logger.info("‚úÖ Scheduler d√©marr√© avec succ√®s")
        print("‚úÖ Scheduler d√©marr√© avec succ√®s - V√©rification toutes les minutes")
        print(f"üìä Jobs planifi√©s: {len(scheduler.get_jobs())}")
        
        # Afficher les jobs pour d√©bugger
        for job in scheduler.get_jobs():
            print(f"  - Job: {job.name} | Prochaine ex√©cution: {job.next_run_time}")
        
        # Arr√™ter proprement le scheduler √† la fermeture de Django
        atexit.register(lambda: shutdown_scheduler())
        
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage scheduler: {e}", exc_info=True)
        print(f"‚ùå Erreur d√©marrage scheduler: {e}")
        import traceback
        traceback.print_exc()

def shutdown_scheduler():
    """
    Arr√™te proprement le scheduler.
    """
    if scheduler.running:
        logger.info("üõë Arr√™t du scheduler...")
        print("üõë Arr√™t du scheduler...")
        scheduler.shutdown(wait=False)
        logger.info("‚úÖ Scheduler arr√™t√©")
        print("‚úÖ Scheduler arr√™t√©")

def get_scheduler_status():
    """
    Retourne le statut du scheduler (utile pour le d√©bogage).
    """
    return {
        'running': scheduler.running,
        'jobs_count': len(scheduler.get_jobs()),
        'jobs': [
            {
                'id': job.id,
                'name': job.name,
                'next_run': str(job.next_run_time)
            }
            for job in scheduler.get_jobs()
        ]
    }