# core/jobs.py
from django.utils.timezone import now
from django.db.models import Q
from datetime import timedelta
import logging

from core.models import ConfigurationTest, ExecutionTest

logger = logging.getLogger(__name__)

# D√©finition des p√©riodicit√©s
PERIODICITE_DELTA = {
    '2min': timedelta(minutes=2),
    '2h': timedelta(hours=2),
    '6h': timedelta(hours=6),
    '1j': timedelta(days=1),
    '1s': timedelta(weeks=1),
    '1m': timedelta(days=30),
}

def execute_pending_tests():
    current_time = now()
    logger.info(f"üïí D√©but v√©rification des tests √† ex√©cuter - {current_time}")
    print(f"üïí D√©but v√©rification des tests √† ex√©cuter - {current_time}")

    # Configurations actives et valides dans la p√©riode
    active_configs = ConfigurationTest.objects.filter(
        is_active=True
    ).filter(
        Q(date_activation__lte=current_time) | Q(date_activation__isnull=True)
    ).filter(
        Q(date_desactivation__gt=current_time) | Q(date_desactivation__isnull=True)
    )

    logger.info(f"üìä {active_configs.count()} configuration(s) active(s) trouv√©e(s)")
    print(f"üìä {active_configs.count()} configuration(s) active(s) trouv√©e(s)")

    for config in active_configs:
        logger.info(f"üîç V√©rification configuration: {config.nom} (P√©riodicit√©: {config.periodicite})")
        print(f"üîç V√©rification configuration: {config.nom} (P√©riodicit√©: {config.periodicite})")

        delta = PERIODICITE_DELTA.get(config.periodicite)
        if not delta:
            logger.warning(f"‚ö†Ô∏è P√©riodicit√© inconnue pour {config.nom} : {config.periodicite}")
            print(f"‚ö†Ô∏è P√©riodicit√© inconnue pour {config.nom} : {config.periodicite}")
            continue

        last_exec = config.last_execution
        logger.info(f"‚è∞ Derni√®re ex√©cution: {last_exec}")
        print(f"‚è∞ Derni√®re ex√©cution: {last_exec}")

        if not last_exec:
            # Aucun test encore ex√©cut√© ‚Üí cr√©er une premi√®re ex√©cution
            logger.info(f"üöÄ Premi√®re ex√©cution pour : {config.nom}")
            print(f"üöÄ Premi√®re ex√©cution pour : {config.nom}")
            
            execution = ExecutionTest.objects.create(configuration=config, statut='pending')
            config.last_execution = current_time
            config.save()
            
            logger.info(f"‚úÖ Execution cr√©√©e: {execution.id}")
            print(f"‚úÖ Execution cr√©√©e: {execution.id}")
        else:
            time_since_last = current_time - last_exec
            logger.info(f"‚è±Ô∏è Temps √©coul√© depuis derni√®re ex√©cution: {time_since_last}")
            print(f"‚è±Ô∏è Temps √©coul√© depuis derni√®re ex√©cution: {time_since_last}")
            print(f"üìÖ Delta requis: {delta}")

            # V√©rifier si on a d√©pass√© le double du d√©lai ‚Üí alors test oubli√©
            if time_since_last >= 2 * delta:
                logger.warning(f"‚ùå Test oubli√© pour : {config.nom} - Temps √©coul√©: {time_since_last}")
                print(f"‚ùå Test oubli√© pour : {config.nom} - Temps √©coul√©: {time_since_last}")
                
                execution = ExecutionTest.objects.create(configuration=config, statut='non_executed')
                config.last_execution = current_time
                config.save()
                
                logger.info(f"‚úÖ Execution 'non_executed' cr√©√©e: {execution.id}")
                print(f"‚úÖ Execution 'non_executed' cr√©√©e: {execution.id}")

            elif time_since_last >= delta:
                logger.info(f"üöÄ Ex√©cution planifi√©e pour : {config.nom}")
                print(f"üöÄ Ex√©cution planifi√©e pour : {config.nom}")
                
                execution = ExecutionTest.objects.create(configuration=config, statut='pending')
                config.last_execution = current_time
                config.save()
                
                logger.info(f"‚úÖ Execution 'pending' cr√©√©e: {execution.id}")
                print(f"‚úÖ Execution 'pending' cr√©√©e: {execution.id}")
            else:
                temps_restant = delta - time_since_last
                logger.info(f"‚è∏Ô∏è Trop t√¥t pour {config.nom} - Temps restant: {temps_restant}")
                print(f"‚è∏Ô∏è Trop t√¥t pour {config.nom} - Temps restant: {temps_restant}")

    logger.info(f"‚úÖ Fin v√©rification des tests")
    print(f"‚úÖ Fin v√©rification des tests")