# Generated by Django 5.2.4 on 2025-07-17 05:45

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Axe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConfigurationTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('emails_notification', models.JSONField(default=list)),
                ('periodicite', models.CharField(choices=[('2min', 'Toutes les 2 minutes'), ('2h', 'Toutes les 2 heures'), ('6h', 'Toutes les 6 heures'), ('1j', 'Une fois par jour'), ('1s', 'Une fois par semaine'), ('1m', 'Une fois par mois')], max_length=10)),
                ('axes', models.ManyToManyField(to='core.axe')),
            ],
        ),
        migrations.CreateModel(
            name='ExecutionTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('pending', 'En attente'), ('running', 'En cours'), ('done', 'Termin√©'), ('error', 'Erreur')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('log_fichier', models.FileField(blank=True, null=True, upload_to='logs/')),
                ('rapport', models.TextField(blank=True)),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.configurationtest')),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_redmine', models.CharField(max_length=255)),
                ('nom', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('logo', models.ImageField(upload_to='logos/')),
                ('contrat', models.TextField()),
                ('charge_de_compte', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='configurationtest',
            name='projet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.projet'),
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('fichier', models.FileField(upload_to='scripts/')),
                ('axe', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.axe')),
            ],
        ),
        migrations.AddField(
            model_name='configurationtest',
            name='scripts',
            field=models.ManyToManyField(to='core.script'),
        ),
        migrations.CreateModel(
            name='SousAxe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('axe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.axe')),
            ],
        ),
        migrations.AddField(
            model_name='script',
            name='sous_axe',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sousaxe'),
        ),
        migrations.AddField(
            model_name='configurationtest',
            name='sous_axes',
            field=models.ManyToManyField(to='core.sousaxe'),
        ),
    ]
